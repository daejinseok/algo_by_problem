/* page 126 생각해보기 level 2

0이상 2^n - 1 이하의 수는 각각 원소가 n개인 집합에서 부분집합을 만드는 방법
하나와 대응된다. 이를 이용해서 모든 부분집합을 출력하는 프로그램을 비재귀적으로
작성하라.

*/

const h = require('../h.js')

function subset(n){

	let set = [[]]

	for(let i = 0; i < n; i++){
		set = dup(set, i)
	}

	return set

}

function dup(set, idx){

	const rst = []

	for(let i = 0, end = set.length; i < end; i++){
		rst.push([...set[i], idx])		
		rst.push(set[i])
	}

	return rst
}



h.assertSet( subset(1), [[],[0]] )
h.assertSet( subset(2), [[],[0],[1],[0,1]] )
h.assertSet( subset(3), [[],[0],[1],[0,1]
,[2],[0,2],[1,2],[0,1,2]] )

h.assertSet( subset(4), [
[],[0],[1],[0,1],
[2],[0,2],[1,2],[0,1,2],
[3],[3,0],[3,1],[3,0,1],
[3,2],[3,0,2],[3,1,2],[3,0,1,2]]) 

h.assertSet(subset(5), [
	[ 0, 1, 2, 3, 4 ],
	[ 0, 1, 2, 3 ],
	[ 0, 1, 2, 4 ],
	[ 0, 1, 2 ],
	[ 0, 1, 3, 4 ],
	[ 0, 1, 3 ],
	[ 0, 1, 4 ],
	[ 0, 1 ],
	[ 0, 2, 3, 4 ],
	[ 0, 2, 3 ],
	[ 0, 2, 4 ],
	[ 0, 2 ],
	[ 0, 3, 4 ],
	[ 0, 3 ],
	[ 0, 4 ],
	[ 0 ],
	[ 1, 2, 3, 4 ],
	[ 1, 2, 3 ],
	[ 1, 2, 4 ],
	[ 1, 2 ],
	[ 1, 3, 4 ],
	[ 1, 3 ],
	[ 1, 4 ],
	[ 1 ],
	[ 4, 3, 2 ],
	[ 2, 3 ],
	[ 2, 4 ],
	[ 2 ],
	[ 3, 4 ],
	[ 3 ],
	[ 4 ],
	[]] )